env = require('test_run')
---
...
test_run = env.new()
---
...
-- gh-3018: typeless columns are prohibited.
--
box.execute("CREATE TABLE t1 (id PRIMARY KEY);")
---
- error: Keyword 'PRIMARY' is reserved. Please use double quotes if 'PRIMARY' is an
    identifier.
...
box.execute("CREATE TABLE t1 (a, id INT PRIMARY KEY);")
---
- error: Syntax error near ','
...
box.execute("CREATE TABLE t1 (id PRIMARY KEY, a INT);")
---
- error: Keyword 'PRIMARY' is reserved. Please use double quotes if 'PRIMARY' is an
    identifier.
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a);")
---
- error: Syntax error near ')'
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT, b UNIQUE);")
---
- error: Keyword 'UNIQUE' is reserved. Please use double quotes if 'UNIQUE' is an
    identifier.
...
-- gh-3104: real type is stored in space format.
--
box.execute("CREATE TABLE t1 (id TEXT PRIMARY KEY, a REAL, b INT, c TEXT, d SCALAR);")
---
- row_count: 1
...
box.space.T1:format()
---
- [{'type': 'string', 'nullable_action': 'abort', 'name': 'ID', 'is_nullable': false},
  {'type': 'number', 'nullable_action': 'none', 'name': 'A', 'is_nullable': true},
  {'type': 'integer', 'nullable_action': 'none', 'name': 'B', 'is_nullable': true},
  {'type': 'string', 'nullable_action': 'none', 'name': 'C', 'is_nullable': true},
  {'type': 'scalar', 'nullable_action': 'none', 'name': 'D', 'is_nullable': true}]
...
box.execute("CREATE VIEW v1 AS SELECT b + a, b - a FROM t1;")
---
- row_count: 1
...
box.space.V1:format()
---
- [{'type': 'number', 'nullable_action': 'none', 'name': 'b + a', 'is_nullable': true},
  {'type': 'number', 'nullable_action': 'none', 'name': 'b - a', 'is_nullable': true}]
...
-- gh-2494: index's part also features correct declared type.
--
box.execute("CREATE INDEX i1 ON t1 (a);")
---
- row_count: 1
...
box.execute("CREATE INDEX i2 ON t1 (b);")
---
- row_count: 1
...
box.execute("CREATE INDEX i3 ON t1 (c);")
---
- row_count: 1
...
box.execute("CREATE INDEX i4 ON t1 (id, c, b, a, d);")
---
- row_count: 1
...
box.space.T1.index.I1.parts
---
- - type: number
    is_nullable: true
    fieldno: 2
...
box.space.T1.index.I2.parts
---
- - type: integer
    is_nullable: true
    fieldno: 3
...
box.space.T1.index.I3.parts
---
- - type: string
    is_nullable: true
    fieldno: 4
...
box.space.T1.index.I4.parts
---
- - type: string
    is_nullable: false
    fieldno: 1
  - type: string
    is_nullable: true
    fieldno: 4
  - type: integer
    is_nullable: true
    fieldno: 3
  - type: number
    is_nullable: true
    fieldno: 2
  - type: scalar
    is_nullable: true
    fieldno: 5
...
box.execute("DROP VIEW v1;")
---
- row_count: 1
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
-- gh-3906: data of type BOOL is displayed as should
-- during SQL SELECT.
--
format = {{ name = 'ID', type = 'unsigned' }, { name = 'A', type = 'boolean' }}
---
...
sp = box.schema.space.create("TEST", { format = format } )
---
...
i = sp:create_index('primary', {parts = {1, 'unsigned' }})
---
...
sp:insert({1, true})
---
- [1, true]
...
sp:insert({2, false})
---
- [2, false]
...
box.execute("SELECT * FROM test")
---
- metadata:
  - name: ID
    type: unsigned
  - name: A
    type: boolean
  rows:
  - [1, 1]
  - [2, 0]
...
sp:drop()
---
...
-- gh-3544: concatenation operator accepts only TEXT and BLOB.
--
box.execute("SELECT 'abc' || 1;")
---
- error: 'Inconsistent types: expected TEXT or BLOB got INTEGER'
...
box.execute("SELECT 'abc' || 1.123;")
---
- error: 'Inconsistent types: expected TEXT or BLOB got REAL'
...
box.execute("SELECT 1 || 'abc';")
---
- error: 'Inconsistent types: expected TEXT or BLOB got INTEGER'
...
box.execute("SELECT 1.123 || 'abc';")
---
- error: 'Inconsistent types: expected TEXT or BLOB got REAL'
...
box.execute("SELECt 'a' || 'b' || 1;")
---
- error: 'Inconsistent types: expected TEXT or BLOB got INTEGER'
...
-- What is more, they must be of the same type.
--
box.execute("SELECT 'abc' || randomblob(5);")
---
- error: 'Inconsistent types: expected TEXT got BLOB'
...
box.execute("SELECT randomblob(5) || 'x';")
---
- error: 'Inconsistent types: expected BLOB got TEXT'
...
-- Result of BLOBs concatenation must be BLOB.
--
box.execute("VALUES (TYPEOF(randomblob(5) || zeroblob(5)));")
---
- metadata:
  - name: column1
    type: string
  rows:
  - ['scalar']
...
-- gh-3954: LIKE accepts only arguments of type TEXT and NULLs.
--
box.execute("CREATE TABLE t1 (s SCALAR PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (randomblob(5));")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'blob';")
---
- error: 'Inconsistent types: expected TEXT got BLOB'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE s;")
---
- error: 'Inconsistent types: expected TEXT got BLOB'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE x'0000';")
---
- error: 'Inconsistent types: expected TEXT got BLOB'
...
box.execute("SELECT s LIKE NULL FROM t1;")
---
- metadata:
  - name: s LIKE NULL
    type: integer
  rows:
  - [null]
...
box.execute("DELETE FROM t1;")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1);")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'int';")
---
- error: 'Inconsistent types: expected TEXT got INTEGER'
...
box.execute("SELECT * FROM t1 WHERE 'int' LIKE 4;")
---
- error: 'Inconsistent types: expected TEXT got INTEGER'
...
box.execute("SELECT NULL LIKE s FROM t1;")
---
- metadata:
  - name: NULL LIKE s
    type: integer
  rows:
  - [null]
...
box.space.T1:drop()
---
...
