env = require('test_run')
---
...
test_run = env.new()
---
...
-- gh-3159: on_schema_init triggers
-- the replica has set an on_schema_init trigger, which will set
-- _space:before_replace triggers to change 'test_engine' space engine
-- and 'test_local' space is_local flag when replication starts.
test_run:cmd('create server replica with rpl_master=default, script="replication/replica_on_schema_init.lua"')
---
- true
...
test_engine = box.schema.space.create('test_engine', {engine='memtx'})
---
...
test_local =  box.schema.space.create('test_local', {is_local=false})
---
...
test_engine.engine
---
- memtx
...
test_local.is_local
---
- false
...
_ = test_engine:create_index("pk")
---
...
_ = test_local:create_index("pk")
---
...
test_engine:insert{1}
---
- [1]
...
test_local:insert{2}
---
- [2]
...
box.schema.user.grant('guest', 'replication')
---
...
test_run:cmd('start server replica')
---
- true
...
test_run:cmd('switch replica')
---
- true
...
box.space.test_engine.engine
---
- vinyl
...
box.space.test_local.is_local
---
- true
...
box.space.test_engine:insert{3}
---
- [3]
...
box.space.test_local:insert{4}
---
- [4]
...
box.space.test_engine:select{}
---
- - [1]
  - [3]
...
box.space.test_local:select{}
---
- - [2]
  - [4]
...
test_run:cmd('switch default')
---
- true
...
test_run:cmd('set variable replica_port to "replica.listen"')
---
- true
...
box.cfg{replication=replica_port}
---
...
test_engine:select{}
---
- - [1]
  - [3]
...
-- the space truly became local on replica
test_local:select{}
---
- - [2]
...
box.cfg{replication=nil}
---
...
test_run:cmd('stop server replica with cleanup=1')
---
- true
...
test_run:cleanup_cluster()
---
...
box.schema.user.revoke('guest', 'replication')
---
...
test_engine:drop()
---
...
test_local:drop()
---
...
